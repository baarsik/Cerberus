@using System.Security.Claims
@using DataContext.Models
@using Web.Components.Models
@using Web.Controllers.Services
@using Web.Models.Api.Comments
@using Web.Models.Extensions

@implements IDisposable

@inject CommentsService CommentsService;
@inject IStringLocalizer<Comments> L;

@code
{
    [Parameter]
    public Guid EntityId { get; set; }

    [Parameter]
    public int Page { get; set; } = 1;
}

<div data-entityId="@EntityId">
    <h3>@L["Comments_Header"]</h3>
    
    @foreach (var comment in Model.Items)
    {
        <Comment Model="@comment" OnDeleteClicked="@DeleteCommentAsync"/>
    }

    @if (!Model.Items.Any())
    {
        <Panel>
            <Body>@L["Comments_NoComments"]</Body>
        </Panel>
    }
    else
    {
        <Paginator Page="@Model.Page" TotalPages="@Model.TotalPages" OnPageChange="@ReloadPageAsync"/>
    }

    <h3>@L["NewComment_Header"]</h3>

    @if (!IsAuthenticated)
    {
        <Panel Class="panel-c-warning">
            <Body>@L["Error_AuthorizationRequired"].Value.AsMarkupString()</Body>
        </Panel>
    }
    else if (User.IsReadOnly())
    {
        <Panel Class="panel-c-warning">
            <Body>@string.Format(L["Error_ReadOnlyMode"].Value, User.ReadOnlyEnd.Value.ToFormattedDateTimeString()).AsMarkupString()</Body>
        </Panel>
    }
    else
    {
        <EditForm Model="NewComment" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <textarea class="summernote summernote-comments blazor" @bind-value="NewComment.Text" @bind-value:event="oninput"></textarea>
            <input type="submit" class="btn btn-accent" value="@L["NewComment_SubmitButton"]" />
            <ValidationSummary />
        </EditForm>
    }
</div>

@code
{
    private NewComment NewComment { get; set; } = new();

    private CommentsPageable Model { get; set; } = new();

    private bool IsAuthenticated { get; set; }
    
    private ApplicationUser User { get; set; }

    private DotNetObjectReference<Comments> _objRef;

    protected override async Task OnInitializedAsync()
    {
        if (EntityId == default)
        {
            throw new ArgumentNullException(nameof(EntityId));
        }
        
        Model = await CommentsService.GetCommentsAsync(EntityId, Page);

        var claimsPrincipal = await GetClaimsPrincipalAsync();
        IsAuthenticated = claimsPrincipal?.Identity?.IsAuthenticated == true;
        User = await CommentsService.GetUserAsync(claimsPrincipal);
        
        StateHasChanged();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
        }
        
        await JsRuntime.InvokeVoidAsync("activateBasicSummernote", $"[data-entityId='{EntityId}'] .summernote.summernote-comments.blazor");
        await JsRuntime.InvokeVoidAsync("attachBlazorToSummernote", $"[data-entityId='{EntityId}'] .summernote.summernote-comments.blazor", _objRef, nameof(OnTextChange));
    }

    [JSInvokable]
    public void OnTextChange(string contents)
    {
        NewComment.Text = contents;
    }
    
    private async Task HandleValidSubmit()
    {
        if (!IsAuthenticated)
        {
            return;
        }

        await CommentsService.AddCommentAsync(User, EntityId, NewComment.Text);
        await ReloadPageAsync(1);
    }

    private async Task<ClaimsPrincipal> GetClaimsPrincipalAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        return authState?.User;
    }

    private async Task ReloadPageAsync(int page)
    {
        Page = page;
        Model = await CommentsService.GetCommentsAsync(EntityId, Page);
        NewComment.Text = string.Empty;
        await JsRuntime.InvokeVoidAsync("resetSummernote", $"[data-entityId='{EntityId}'] .summernote.summernote-comments.blazor");
        StateHasChanged();
    }

    private async Task DeleteCommentAsync(Guid id)
    {
        if (!IsAuthenticated)
        {
            return;
        }
        
        await CommentsService.DeleteCommentAsync(User, id);
        StateHasChanged();
        
        await ReloadPageAsync(Page);
    }

    public void Dispose()
    {
        _objRef?.Dispose();
    }
}
