@using Microsoft.Extensions.Localization
@using Web.Controllers.Services
@using DataContext.Models
@using System.Security.Claims
@using DataContext.EnumDataTypes
@using Web.Models.ViewModels

@inject WebNovelService WebNovelService
@inject IStringLocalizer<ChaptersBlock> L;

@code
{
    [Parameter]
    public Guid WebNovelId { get; set; }
}

@if (IsInitialized)
{
    if (WebNovel.Chapters.Any(c => c.Translations.Any(d => Model.WebNovelInfo.UserLanguages.Contains(d.Language))))
    {
        if (WebNovel.UsesVolumes)
        {
            var volumes = WebNovel.Chapters
                .Select(c => c.Volume)
                .Distinct()
                .OrderByDescending(c => c * (Model.ReaderData.SortOrder == SortOrder.FromNewToOld ? 1 : -1));
            foreach (var volume in volumes)
            {
                <Panel Class="panel-c-accent">
                    <Header>@L["Volume"] @volume</Header>
                    <Body>
                        <ChaptersBlockItems Model="@Model" Volume="@volume"/>
                    </Body>
                </Panel>
            }
        }
        else
        {
            <Panel Class="panel-c-accent">
                <Header>@L["Chapters"]</Header>
                <Body>
                    <ChaptersBlockItems Model="@Model"/>
                </Body>
            </Panel>
        }
    }
    else
    {
        <Panel>
            <Header>@L["Chapters"]</Header>
            <Body>@L["Chapters_NoChapters"]</Body>
        </Panel>
    }
}
else
{
    <Panel>
        <Header>@L["Chapters"]</Header>
        <Body>@L["Loading_Body"]</Body>
    </Panel>    
}

@code
{
    private WebNovelDetailsViewModel Model { get; set; }
    private WebNovel WebNovel => Model?.WebNovelInfo?.WebNovel;
    
    private bool IsInitialized { get; set; }
    private ClaimsPrincipal ClaimsPrincipal { get; set; }
    private ApplicationUser User { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        ClaimsPrincipal = await GetClaimsPrincipalAsync();
        User = await WebNovelService.GetUserAsync(ClaimsPrincipal);
        Model = await WebNovelService.GetWebNovelDetailsViewModelAsync(User, WebNovelId);
        IsInitialized = true;
    }
    
    private async Task<ClaimsPrincipal> GetClaimsPrincipalAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        return authState?.User;
    }
}
