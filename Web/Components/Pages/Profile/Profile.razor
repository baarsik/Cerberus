@page "/profile/{name}"

@using Web.Controllers.Services
@using DataContext.Models
@using Web.Models.ViewModels

@inject AuthService AuthService
@inject ProfileService ProfileService
@inject IStringLocalizer<Profile> L

@code
{
    [Parameter]
    public string Name { get; set; }
}

<NotNullLoading Object="@User">
    <div class="flex-column">
        <div class="flex-row m-b">
            <Avatar UserName="@User.DisplayName" AvatarName="@User.Avatar" Class="m-r"/>
            <div class="flex-column">
                <div class="profile-name">
                    <div>@User.DisplayName</div>
                </div>
                <div>
                    @L["RegisteredOn"] @User.RegisterDate.ToLongDateString()
                </div>
                @if (IsOwnProfile)
                {
                    <div class="m-t-xs">
                        <a class="btn btn-default btn-xs" href="/account/changepassword">@L["ChangePasswordButton"]</a>
                        <a class="btn btn-default btn-xs" href="/account/editprofile">@L["EditProfileButton"]</a>
                    </div>
                }
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <Panel Class="panel-c-warning">
                    <Header>@L["WNStats_Title"]</Header>
                    <Body>
                        <div><b>@L["WNStats_TotalWNs"]:</b> @Statistics.WebNovel.TotalWebNovels</div>
                        <div><b>@L["WNStats_TotalChapters"]:</b> @Statistics.WebNovel.TotalChapters</div>
                        <div><b>@L["WNStats_TotalComments"]:</b> @Statistics.WebNovel.TotalComments</div>
                    </Body>
                </Panel>
            </div>
        </div>
    </div>
</NotNullLoading>

@code
{
    private bool IsOwnProfile { get; set; }
    private ApplicationUser User { get; set; }
    private ProfileStatistics Statistics { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var user = await AuthService.GetUserByDisplayNameAsync(Name);
        if (user == null)
        {
            NavigationManager.NavigateTo("/404.html");
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = await ProfileService.GetUserAsync(authState?.User);

        IsOwnProfile = currentUser != null && user.Id == currentUser.Id;
        User = user;
        Statistics = await ProfileService.GetUserStatisticsAsync(user);
    }
}
