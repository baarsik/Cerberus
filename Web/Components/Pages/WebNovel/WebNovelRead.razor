@inherits OwningComponentBase<WebNovelService>

@page "/read/{languageCode}/{webNovelUrl}/{chapterNumber:int}"
@page "/read/{languageCode}/{webNovelUrl}/{volume:int}/{chapterNumber:int}"

@using Web.Controllers.Services
@using System.Security.Claims
@using System.Web
@using DataContext.Models
@using Web.Components.Partial.WebNovel.WebNovelRead
@using Web.Models.Extensions
@using Web.Models.Helpers
@using Web.Models.ViewModels

@inject IStringLocalizer<WebNovelRead> L

@code
{
    [Parameter]
    public string LanguageCode { get; set; }
    
    [Parameter]
    public string WebNovelUrl { get; set; }

    [Parameter]
    public int? Volume { get; set; }

    [Parameter]
    public int ChapterNumber { get; set; }
}

<NotNullLoading Object="@Model">
    <div class="view-header">
        <div class="header-icon">
            <i class="fal fa-book fa-sm"></i>
        </div>
        <div class="pull-right btn-group">
            @if (ClaimsPrincipal.HasWebNovelEditorAccess())
            {
                <a class="btn btn-lg btn-default" href="/addchaptertranslation/@Model.Translation.Id">
                    @L["AddTranslationButton"].Value.AsMarkupString()
                </a>
                <a class="btn btn-lg btn-default" href="/editchaptertranslation/@Model.Translation.Id">
                    @L["EditButton"].Value.AsMarkupString()
                </a>
            }
        </div>
        <div class="header-title">
            <h3>
                @GetTitle()
                @if (Model.Translation.Chapter.IsAdultContent)
                {
                    <small class="text-accent">(18+)</small>
                }
            </h3>
            <small>
                @StringHelpers.GetCommaSpaceSeparatedString(
                    Model.WebNovelContent.Name,
                    Model.Translation.Chapter.WebNovel.Author,
                    Model.Translation.CreationDate.ToFormattedString())
            </small>
        </div>
    </div>

    @if (!IsAuthenticated)
    {
    <Panel Class="panel-c-danger">
        <Header>@L["Unauthorized_Heading"]</Header>
        <Body>@L["Unauthorized_Description"].Value.AsMarkupString()</Body>
    </Panel>
    }
    
    <div class="panel">
        <div class="panel-body">
            <div class="m-b">
                <ChapterNavigation WebNovel="@Model.WebNovelContent.WebNovel" PreviousChapter="@Model.PrevChapterContent" NextChapter="@Model.NextChapterContent"/>
            </div>
            @Model.Translation.Text.AsMarkupString()
        </div>
        <div class="panel-footer">
            <ChapterNavigation WebNovel="@Model.WebNovelContent.WebNovel" PreviousChapter="@Model.PrevChapterContent" NextChapter="@Model.NextChapterContent"/>
        </div>
    </div>
    
    <Comments EntityId="@Model.Translation.ChapterId"/>
</NotNullLoading>

@code
{
    private WebNovelReadViewModel Model { get; set; }

    private ClaimsPrincipal ClaimsPrincipal { get; set; }
    private ApplicationUser User { get; set; }
    private bool IsAuthenticated => ClaimsPrincipal?.Identity?.IsAuthenticated == true;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal = authState?.User;
        User = await Service.GetUserAsync(ClaimsPrincipal);
    }

    protected override async Task OnParametersSetAsync()
    {
        Model = await Service.GetChapterTranslationAsync(User, WebNovelUrl, LanguageCode, Volume ?? 1, ChapterNumber);
    }
    
    private string GetTitle()
    {
        var value = $"{L["Chapter"].Value} {Model.Translation.Chapter.Number}";
        if (!string.IsNullOrEmpty(Model.Translation.Title))
        {
            value += $" â€“ {HttpUtility.HtmlDecode(Model.Translation.Title)}";
        }
        return value;
    }
}
