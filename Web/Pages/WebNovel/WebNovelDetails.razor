@inherits OwningComponentBase<WebNovelService>

@page "/details/{webNovelUrl}"

@using Web.Controllers.Services
@using System.Security.Claims
@using System.Web
@using DataContext.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Localization
@using Web.Components.Partial.WebNovel.WebNovelDetails
@using Web.Controllers
@using Web.Models.Extensions
@using Web.Models.Helpers
@using Web.Models.ViewModels

@inject IStringLocalizer<WebNovelDetails> L

@code
{
    [Parameter]
    public string WebNovelUrl { get; set; }
}

<NotNullLoading Object="@Model">
    <div class="view-header">
        <div class="header-icon">
            <i class="fal fa-book fa-sm"></i>
        </div>
        <div class="pull-right btn-group">
            @if (IsAuthenticated && ClaimsPrincipal.HasWebNovelEditorAccess())
            {
                if (CanCreateNewTranslation)
                {
                    <a class="btn btn-lg btn-default" href="/@nameof(WebNovelController.AddWebNovelTranslation)/@WebNovel.UrlName">
                        @L["AddWebNovelTranslationButton"].Value.AsMarkupString()
                    </a>
                }
                if (!WebNovel.IsComplete)
                {
                    <a class="btn btn-lg btn-default" href="/@nameof(WebNovelController.AddChapter).ToLower()/@WebNovel.Id">
                        @L["AddChapterButton"].Value.AsMarkupString()
                    </a>
                }
                <div class="btn-group">
                    <button class="btn btn-lg btn-default dropdown-toggle" data-toggle="dropdown">
                        <i class="far fa-pen"></i>
                    </button>
                    <ul class="dropdown-menu">
                        @foreach (var translation in Model.WebNovelInfo.WebNovel.Translations)
                        {
                            <li><a class="dropdown-item" href="/@nameof(WebNovelController.EditWebNovelTranslation).ToLower()/@translation.Id">@translation.Language.LocalName</a></li>
                        }
                    </ul>
                </div>
            }
        </div>
        <div class="header-title">
            <h3>
                @HttpUtility.HtmlDecode(WebNovelContent.Name)
                @if (WebNovel.IsAdultContent)
                {
                    <small class="text-accent">(18+)</small>
                }
            </h3>
            <span class="badge">
                <i class="far fa-pen"></i> @Model.WebNovelInfo.TotalSymbols.ToStringDisplayFormat()
            </span>
            <small>
                @StringHelpers.GetCommaSpaceSeparatedString(WebNovel.OriginalName, WebNovel.Author)
            </small>
        </div>
    </div>
    <hr/>
    
    <div class="panel panel-filled">
        <div class="panel-heading">@L["Description_Header"]</div>
        <div class="panel-body">@(new MarkupString(WebNovelContent.Description))</div>
        @if (WebNovel.Translations.Count > 1)
        {
            <div class="panel-heading">@L["AlternativeNames_Header"]</div>
            <div class="panel-body">@StringHelpers.GetCommaSpaceSeparatedString(WebNovel.Translations.Select(c => c.Name))</div>
        }
        @if (IsAuthenticated)
        {
            <div class="panel-body">
                @if (Model.ReaderData.LastOpenedChapter != null)
                {
                    var chapterLinkInfo = Model.ReaderData.LastOpenedChapter;
                    <a class="btn btn-accent m-r-xs" href="/read/@chapterLinkInfo.LanguageCode/@WebNovel.UrlName/@chapterLinkInfo.Volume/@chapterLinkInfo.Number">
                        @L["ContinueReadingButton"].Value.AsMarkupString()
                    </a>
                }
                <a class="btn btn-default" @onclick="@(() => UpdateNotificationStatusAsync(!Model.ReaderData.NotificationsEnabled))">
                    @L[Model.ReaderData.NotificationsEnabled ? "DisableNotificationsButton" : "EnableNotificationsButton"].Value.AsMarkupString()
                </a>
            </div>
        }
    </div>
                
    <ChaptersBlock Model="@Model"/>
    <Comments EntityId="@Model.WebNovelInfo.WebNovel.Id"/>
</NotNullLoading>

@code
{
    private WebNovelDetailsViewModel Model { get; set; }
    private WebNovel WebNovel => Model?.WebNovelInfo.WebNovel;
    private WebNovelContent WebNovelContent => Model?.WebNovelInfo.WebNovelContent;
    private bool CanCreateNewTranslation { get; set; }
    
    private ClaimsPrincipal ClaimsPrincipal { get; set; }
    private ApplicationUser User { get; set; }
    private bool IsAuthenticated => ClaimsPrincipal?.Identity?.IsAuthenticated == true;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal = authState?.User;
        User = await Service.GetUserAsync(ClaimsPrincipal);
        await UpdateModelAsync();
    }

    private async Task UpdateNotificationStatusAsync(bool notificationsEnabled)
    {
        await Service.UpdateNotificationStatus(User, WebNovel.Id, notificationsEnabled);
        await UpdateModelAsync();
    }

    private async Task UpdateModelAsync()
    {
        Model = await Service.GetWebNovelDetailsViewModelAsync(User, WebNovelUrl);
        CanCreateNewTranslation = (await Service.GetLanguagesAsync(WebNovel.Translations.Select(x => x.Language))).Any();
        StateHasChanged();
    }
}
