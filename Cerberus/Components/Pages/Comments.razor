@using System.Security.Claims
@using Cerberus.Components.Models
@using Cerberus.Controllers.Services
@using Cerberus.Models.Api.Comments
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Components.Forms

@inject CommentsService CommentsService;
@inject NavigationManager NavigationManager;
@inject IHttpContextAccessor HttpContextAccessor;

<div data-entityId="@EntityId">
    <h3>Comments</h3>
    
    @foreach (var comment in Model.Items)
    {
        <Comment Model="@comment"/>
    }

    @if (!Model.Items.Any())
    {
        <div class="panel panel-filled">
            <div class="panel-body">
                No comments
            </div>
        </div>
    }

    <h3>New comment</h3>

    @if (IsAuthenticated)
    {
        <EditForm Model="NewComment" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <textarea class="summernote" @bind-value="NewComment.Text" @bind-value:event="oninput"></textarea>
            <input type="submit" class="btn btn-accent" value="Send" @onclick="HandleValidSubmit"/>
            <ValidationSummary />
        </EditForm>
    }
    else
    {
        <div class="panel panel-filled panel-c-warning">
            <div class="panel-body">
                Please <a href="/account/login">Sign In</a> or <a href="/account/register">Sign Up</a> in order to be able to comment
            </div>
        </div>
    }
</div>

@code
{
    [Parameter]
    public Guid EntityId { get; set; }

    [Parameter]
    public int Page { get; set; } = 1;

    private NewComment NewComment { get; set; } = new();

    private CommentsPageable Model { get; set; } = new();

    private ClaimsPrincipal User => HttpContextAccessor.HttpContext?.User;
    private bool IsAuthenticated => HttpContextAccessor.HttpContext?.User?.Identity?.IsAuthenticated == true;

    protected override async Task OnInitializedAsync()
    {
        if (EntityId == default)
        {
            throw new ArgumentNullException(nameof(EntityId));
        }
        
        Model = await CommentsService.GetCommentsAsync(EntityId, Page);
    }
    
    private async Task HandleValidSubmit()
    {
        if (!IsAuthenticated)
        {
            return;
        }

        var user = await CommentsService.GetUserAsync(User);
        await CommentsService.AddCommentAsync(user, EntityId, NewComment.Text);
        Page = Model.TotalPages;
        Model = await CommentsService.GetCommentsAsync(EntityId, Page);
        await InvokeAsync(StateHasChanged);
    }
}
